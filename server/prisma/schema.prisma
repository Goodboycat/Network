// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  MODERATOR
  ADMIN
}

enum PostVisibility {
  PUBLIC
  CONNECTIONS
  PRIVATE
}

enum MediaType {
  IMAGE
  VIDEO
  AUDIO
  DOCUMENT
}

enum NotificationType {
  LIKE
  COMMENT
  MENTION
  FOLLOW
  MESSAGE
  SYSTEM
}

enum ConnectionRequestStatus {
  PENDING
  ACCEPTED
  REJECTED
}

model User {
  id                String   @id @default(uuid())
  email             String   @unique
  username          String   @unique
  passwordHash      String?
  displayName       String
  avatar            String?
  coverImage        String?
  bio               String?
  location          String?
  website           String?
  birthdate         DateTime?
  verified          Boolean  @default(false)
  role              UserRole @default(USER)
  
  // Privacy Settings
  profileVisibility String   @default("public")
  showEmail         Boolean  @default(false)
  showLocation      Boolean  @default(true)
  showBirthdate     Boolean  @default(false)
  allowMessages     String   @default("everyone")
  allowTagging      Boolean  @default(true)
  showOnlineStatus  Boolean  @default(true)
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  // Relations
  posts             Post[]
  comments          Comment[]
  likes             Like[]
  bookmarks         Bookmark[]
  
  // Connections
  followers         Connection[] @relation("Following")
  following         Connection[] @relation("Follower")
  
  // Messages
  sentMessages      Message[] @relation("Sender")
  conversations     ConversationParticipant[]
  
  // Notifications
  notifications     Notification[]
  
  // Refresh Tokens
  refreshTokens     RefreshToken[]
  
  @@index([email])
  @@index([username])
}

model Post {
  id            String         @id @default(uuid())
  content       String
  visibility    PostVisibility @default(PUBLIC)
  
  authorId      String
  author        User           @relation(fields: [authorId], references: [id], onDelete: Cascade)
  
  media         Media[]
  comments      Comment[]
  likes         Like[]
  bookmarks     Bookmark[]
  tags          Tag[]
  
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  
  @@index([authorId])
  @@index([createdAt])
}

model Comment {
  id          String    @id @default(uuid())
  content     String
  
  postId      String
  post        Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  
  authorId    String
  author      User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  
  parentId    String?
  parent      Comment?  @relation("CommentReplies", fields: [parentId], references: [id], onDelete: Cascade)
  replies     Comment[] @relation("CommentReplies")
  
  likes       Like[]
  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  @@index([postId])
  @@index([authorId])
}

model Like {
  id        String   @id @default(uuid())
  
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  postId    String?
  post      Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  
  commentId String?
  comment   Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now())
  
  @@unique([userId, postId])
  @@unique([userId, commentId])
  @@index([userId])
  @@index([postId])
  @@index([commentId])
}

model Bookmark {
  id        String   @id @default(uuid())
  
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  postId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now())
  
  @@unique([userId, postId])
  @@index([userId])
}

model Connection {
  id          String   @id @default(uuid())
  
  followerId  String
  follower    User     @relation("Follower", fields: [followerId], references: [id], onDelete: Cascade)
  
  followingId String
  following   User     @relation("Following", fields: [followingId], references: [id], onDelete: Cascade)
  
  createdAt   DateTime @default(now())
  
  @@unique([followerId, followingId])
  @@index([followerId])
  @@index([followingId])
}

model Conversation {
  id          String                    @id @default(uuid())
  isGroup     Boolean                   @default(false)
  groupName   String?
  groupAvatar String?
  
  participants ConversationParticipant[]
  messages    Message[]
  
  createdAt   DateTime                  @default(now())
  updatedAt   DateTime                  @updatedAt
}

model ConversationParticipant {
  id             String       @id @default(uuid())
  
  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  
  userId         String
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  joinedAt       DateTime     @default(now())
  
  @@unique([conversationId, userId])
  @@index([userId])
}

model Message {
  id             String       @id @default(uuid())
  content        String
  
  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  
  senderId       String
  sender         User         @relation("Sender", fields: [senderId], references: [id], onDelete: Cascade)
  
  media          Media[]
  readBy         MessageRead[]
  
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  
  @@index([conversationId])
  @@index([senderId])
}

model MessageRead {
  id        String   @id @default(uuid())
  
  messageId String
  message   Message  @relation(fields: [messageId], references: [id], onDelete: Cascade)
  
  userId    String
  
  readAt    DateTime @default(now())
  
  @@unique([messageId, userId])
  @@index([messageId])
}

model Media {
  id           String    @id @default(uuid())
  url          String
  type         MediaType
  thumbnailUrl String?
  width        Int?
  height       Int?
  size         Int
  mimeType     String
  
  postId       String?
  post         Post?     @relation(fields: [postId], references: [id], onDelete: Cascade)
  
  messageId    String?
  message      Message?  @relation(fields: [messageId], references: [id], onDelete: Cascade)
  
  createdAt    DateTime  @default(now())
  
  @@index([postId])
  @@index([messageId])
}

model Tag {
  id        String   @id @default(uuid())
  name      String   @unique
  
  posts     Post[]
  
  usageCount Int     @default(0)
  createdAt DateTime @default(now())
  
  @@index([name])
}

model Notification {
  id        String           @id @default(uuid())
  type      NotificationType
  title     String
  message   String
  data      Json?
  read      Boolean          @default(false)
  actionUrl String?
  
  userId    String
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  createdAt DateTime         @default(now())
  
  @@index([userId])
  @@index([createdAt])
}

model RefreshToken {
  id        String   @id @default(uuid())
  token     String   @unique
  
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  expiresAt DateTime
  createdAt DateTime @default(now())
  
  @@index([userId])
  @@index([token])
}
